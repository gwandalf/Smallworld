//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Implementation.Modele.Jeu.Unit
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using System.Windows.Media;
    using System.Windows.Media.Imaging;

    /**
     * \class Gaulois
     * 
     * \brief Represents unites of type "Gaulois"
     * 
     */
    [Serializable]
	public class Gaulois : Unite
	{
        public static ImageBrush ICON = new ImageBrush(new BitmapImage(new Uri(@"..\..\Resources\gaulois.gif", UriKind.Relative)));

        protected int deplacementPlaine;

        /**
         * \fn public Gaulois()
         * \brief constructor directly from superclass
         * 
         */
		public Gaulois() : base()
		{
            icon = ICON;
            deplacementPlaine = 1;
		}

        //same behaviour as the default's one.
        //However, the moving on a case of type PLAINE is considered free
        public override int deplacementPossible(int lig, int col)
        {
            int res = Math.Abs(legion.Ligne - lig) + Math.Abs(legion.Colonne - col);
            if (carte.Cases[lig][col] == carte.Fabrique.Plaine)
                res /= 2;
            if (res <= deplacement && carte.Cases[lig][col] != carte.Fabrique.Eau)
                return res;
            else
                return -1;
        }

        //special rules :
        //  * No points given on mountains
        //  * Bonus on land
        public override void setBonusMalusPoints(bool on)
        {
            if (on)
            {
                carte.Fabrique.Plaine.Points++;
                carte.Fabrique.Montagne.Points = 0;
            }
            else
            {
                carte.Fabrique.Plaine.setDefault();
                carte.Fabrique.Montagne.setDefault();
            }
        }

        //suggestion of cases of type PLAINE when a unit is to be moved
        public override void suggerer()
        {
            List<Tuple<int, int>> adj = carte.getListeAdjacents(this);
            for (int i = 0; i < adj.Count; i++)
            {
                if (carte.Cases[adj[i].Item1][adj[i].Item2] == carte.Fabrique.Plaine)
                    carte.suggerer(adj[i].Item1, adj[i].Item2);
            }
        }

	}
}

