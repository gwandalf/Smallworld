//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Implementation.Modele.Jeu.Unit
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
    using System.Text;
    using System.Windows.Media;
    using System.Windows.Media.Imaging;

    /**
     * \class Nain
     * 
     * \brief Represents unites of type "Nain"
     * 
     */
    [Serializable]
	public class Nain : Unite
	{
        public static ImageBrush ICON = new ImageBrush(new BitmapImage(new Uri(@"..\..\Resources\dwarf.png", UriKind.Relative)));

		public override List<Tuple<int,int>> getChoixCases()
		{
			throw new System.NotImplementedException();
		}

        /**
         * \fn public Nain()
         * \brief constructor directly from superclass
         * 
         */
		public Nain() : base()
		{
            icon = ICON;
		}

        public override int deplacementPossible(int lig, int col)
        {
            int res;
            if (carte.Cases[lig][col] == carte.Fabrique.Montagne && carte.Cases[legion.Ligne][legion.Colonne] == carte.Fabrique.Montagne)
                res = 1;
            else
                res = Math.Abs(legion.Ligne - lig) + Math.Abs(legion.Colonne - col);
            if (res <= deplacement && carte.Cases[lig][col] != carte.Fabrique.Eau)
                return res;
            else
                return -1;
        }

        public override void setBonusMalusPoints(bool on)
        {
            if (on)
            {
                carte.Fabrique.Foret.Points++;
                carte.Fabrique.Plaine.Points = 0;
            }
            else
            {
                carte.Fabrique.Plaine.setDefault();
                carte.Fabrique.Foret.setDefault();
            }
        }

        public override void suggerer()
        {
            List<Tuple<int, int>> adj = carte.getListeAdjacents(this);
            for (int i = 0; i < adj.Count; i++)
            {
                if (carte.Cases[adj[i].Item1][adj[i].Item2] == carte.Fabrique.Montagne 
                    || carte.Cases[adj[i].Item1][adj[i].Item2] == carte.Fabrique.Foret)
                    carte.suggerer(adj[i].Item1, adj[i].Item2);
            }
        }

	}
}

