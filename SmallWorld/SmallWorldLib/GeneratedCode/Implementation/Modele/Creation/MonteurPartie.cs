//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Implementation.Modele.Creation
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using Interfaces.Modele.Creation;
    using Implementation.Modele.Jeu;

    /// <summary>
    /// decides the type of the game (size of the map, number of rounds, ...)
    /// </summary>
	/// <remarks>Builder</remarks>
	public abstract class MonteurPartie : MonteurPartieI
	{
        //number of rounds
        protected int nbTours;
        public int NbTours
        {
            get { return nbTours; }
            set { nbTours = value; }
        }

        //unit factories
        protected List<FabriqueI> fabriquesUnite;
        public virtual List<FabriqueI> FabriquesUnite
		{
            get { return fabriquesUnite; }
            set
            {
                if (value.Count == 2)
                {
                    fabriquesUnite = value;
                }
            }
		}

        /// <summary>
        /// default constructor
        /// </summary>
        public MonteurPartie()
        {
        }

        /// <summary>
        /// The method creates the internal representation of each player.
        /// The players are created initilized with the units produced by the factories
        /// </summary>
        /// <returns> players of the game </returns>
		public virtual List<Joueur> makeJoueurs()
		{
			List<Joueur> res = new List<Joueur>();
            foreach (FabriqueI fu in fabriquesUnite)
            {
                fu.fabriquer();
                res.Add(new Joueur(fu.Products, fu.Nombre));
            }
            return res;
		}

        /// <summary>
        /// The method produces the map, depending on the selected parameters.
        /// The players must be associated to the produced map.
        /// </summary>
        /// <param name="joueurs"> players of the game </param>
        /// <returns> map of the game </returns>
        public abstract CarteCS makeCarte(List<Joueur> joueurs);

	}
}

