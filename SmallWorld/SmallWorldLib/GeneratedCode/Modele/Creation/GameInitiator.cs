//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Modele.Creation
{
	using Modele.Jeu;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;

	/// <remarks>
	/// Singleton
	/// 
	/// </remarks>
	public class GameInitiator : GameInitiatorI
	{
        public static GameInitiator INSTANCE = new GameInitiator();

        private MonteurPartieI monteurPartie;
		public MonteurPartieI MonteurPartie
		{
            get { return monteurPartie; }
            set { monteurPartie = value; }
		}

        private List<FabriqueI> fabriquesUnite;
		public List<FabriqueI> FabriquesUnite
		{
            get { return fabriquesUnite; }
            set { fabriquesUnite = value; }
		}

		private GameInitiator()
		{
            //TODO interface avec boutons (?)
		}

        /**
         * \fn public Partie creerPartie()
         * \brief creation of a party using the builder
         * 
         */
		public PartieI creerPartie()
		{
            monteurPartie.FabriquesUnite = fabriquesUnite;
            List<JoueurI> joueurs = monteurPartie.makeJoueurs();
            CarteI carte = monteurPartie.makeCarte(joueurs);
            return new Partie(joueurs, monteurPartie.NbTours, carte);
		}

        public static Partie config(List<FabriqueI> fu, MonteurPartie mp)
        {
            GameInitiator.INSTANCE.FabriquesUnite = fu;
            GameInitiator.INSTANCE.MonteurPartie = mp;

            //Creation
            return (Partie)GameInitiator.INSTANCE.creerPartie();
        }

        static void Main(string[] args)
        {
            int i = 5;
            //Configuration : peoples and difficulty
            List<FabriqueI> fi = new List<FabriqueI>(2);
            fi.Add(new Fabrique<Gaulois>());
            fi.Add(new Fabrique<Nain>());
            MonteurPartieDemo mp = new MonteurPartieDemo();
            Partie p = config(fi, mp);
            if (p.NombreTours == i)
            {
                Console.WriteLine("Yes !!!");
            }
            else
            {
                Console.WriteLine("No !!!");
            }
        }

	}
}

