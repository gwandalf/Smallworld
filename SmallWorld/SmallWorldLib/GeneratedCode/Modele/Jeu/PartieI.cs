//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Modele.Jeu
{
	using Modele;
	using Modele.Creation;
	using System;
	using System.Collections.Generic;
	using System.Linq;
    using System.Text;
    using System.ComponentModel;

	public interface PartieI
	{
        int NombreTours
        {
            get;
            set;
        }

        List<JoueurI> Joueurs
        {
            get;
            set;
        }

        CarteI Carte
        {
            get;
            set;
        }

		JoueurI start();

		void afficherUnites(List<UniteI> unites);

		JoueurI determinerGagnant();

        /**
         * \fn JoueurI determinerSurvivant()
         * \brief verifies if there is only one player remaining
         * 
         * return the winner, or null if there are two ore more players remaining
         */
        JoueurI determinerSurvivant();

        /**
         * \fn JoueurI determinerMeneur()
         * \brief gives the player who has the highest score
         * 
         * return the winner, or null if there are two ore more players remaining
         */
        JoueurI determinerMeneur();

        /**
         * \fn void update(object sender, PropertyChangedEventArgs e)
         * \brief action that must be done when a player notifies he finished his turn
         * 
         * param[in] sender : notifier
         * param[in] e : arguments identifying the notification
         */
        void update(object sender, PropertyChangedEventArgs e);

	}
}

