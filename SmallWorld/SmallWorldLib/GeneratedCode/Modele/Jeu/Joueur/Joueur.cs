//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Modele.Jeu.Joueur
{
	using Modele.Creation;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using Modele.Jeu.Unit;
    using System.ComponentModel;

    /// <summary>
    /// Representation of a player of the game
    /// </summary>
	public class Joueur : JoueurI
	{
        //number of points
		protected int points;
        public int Points
		{
            get { return points; }
            set { points = value; }
		}

        //instances of Unite that are in the current instance of Joueur army
		protected List<UniteI> unites;
        public List<UniteI> Unites
		{
            get { return unites; }
            set { unites = value; }
		}

        //indicates if the current player have to play now or not
        protected bool turn;
        public bool Turn
        {
            get { return turn; }
            set 
            {
                turn = value;
                foreach (UniteI u in unites)
                    u.Turn = value;
            }
        }

        //number of playable units
        protected int nbUnitesNonJouables;
        public int NbUnitesNonJouables
        {
            get { return nbUnitesNonJouables; }
            set
            {
                nbUnitesNonJouables = value;
                if (nbUnitesNonJouables == nbMaxUnites)
                    OnPropertyChanged("NbUnitesJouables");
            }
        }

        //maximum number of units in the army
        protected int nbMaxUnites;
        public int NbMaxUnites
        {
            get { return nbMaxUnites; }
        }

        //name of the player
        protected string nom;
        public virtual string Nom
        {
            get { return nom; }
            set { nom = value; }
        }

        //usefull method to notify player's observers
        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string name)
        {
            PropertyChanged(this, new PropertyChangedEventArgs(name));
        }

        /// <summary>
        /// the army of the player is initialized, the player is set as the player of the unites
        /// </summary>
        /// <param name="u"> the army of the player </param>
        public Joueur(List<UniteI> u, int capacity)
		{
            nbMaxUnites = capacity;
            unites = u;
            turn = false;
            foreach (UniteI un in unites)
                un.Joueur = this;
            nbUnitesNonJouables = 0;
		}

        /**
         * \fn public virtual void passerMain(JoueurI adversaire)
         * \brief the player "adversaire" can play now
         * 
         * \param[in, out] adversaire : the state of "adversaire" switches to "Tour"
         * 
         */
        public virtual void passerMain(JoueurI adversaire)
		{
            Turn = false;
            adversaire.Turn = true;
		}

        /**
         * \fn public virtual int nbUnitesJouables()
         * \brief Who is the winner ?
         * 
         * \param[in, out] adversaire : the state of "adversaire" switches to "Perdant" or "Gagnant"
         * 
         * \return bool : true if the current player is the winner, else returns false
         */
        public virtual bool aVaincu(JoueurI adversaire)
		{
			throw new System.NotImplementedException();
		}

		public virtual void fin()
		{
			throw new System.NotImplementedException();
		}

        /**
         * \fn public virtual bool unitesSelectionnables(int lig, int col)
         * \brief Are there selectionable unites in the specified case ?
         * 
         * \param[in] lig : line of the case
         * \param[in] col : column of the case
         * 
         * \return bool : true if the current player has selectionnable unites in the specified case
         */
        public virtual bool unitesSelectionnables(int lig, int col)
		{
			throw new System.NotImplementedException();
		}

	}
}

