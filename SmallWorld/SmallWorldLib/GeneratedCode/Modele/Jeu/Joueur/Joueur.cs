//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Modele.Jeu.Joueur
{
	using Modele.Creation;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using Modele.Jeu.Unit;
    using System.ComponentModel;

    /**
     * \class Joueur
     * 
     * \brief Represents players of the game
     * 
     */
	public class Joueur : JoueurI
	{
        //number of points
		private int points;
        public int Points
		{
            get { return points; }
            set { points = value; }
		}

        //instances of Unite that are in the current instance of Joueur army
		private List<UniteI> unites;
        public List<UniteI> Unites
		{
            get { return unites; }
            set { unites = value; }
		}

        //indicates if the current player have to play now or not
        private bool turn;
        public bool Turn
        {
            get { return turn; }
            set 
            {
                turn = value;
                foreach (UniteI u in unites)
                    u.Turn = value;
            }
        }

        private int nbUnitesJouables;
        public int NbUnitesJouables
        {
            get { return nbUnitesJouables; }
            set
            {
                nbUnitesJouables = value;
                if (nbUnitesJouables == 0)
                    OnPropertyChanged("NbUnitesJouables");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string name)
        {
            PropertyChanged(this, new PropertyChangedEventArgs(name));
        }

        /**
         * \fn public Joueur(List<UniteI> unites)
         * \brief constructor
         * 
         * the value of "premier" is set to false
         * 
         * \param[in, out] unites : the army of the player is initialized, the player is set as the player of the unites
         * 
         */
        public Joueur(List<UniteI> u)
		{
            unites = u;
            turn = false;
            foreach (UniteI un in unites)
            {
                un.Joueur = this;
            }
            nbUnitesJouables = 0;
		}

        /**
         * \fn public virtual void jouer()
         * \brief let the current player do an action
         * 
         * An action can be on the followings :
         * - play with one of its units
         * - pass his turn
         * 
         */
        public virtual void jouer()
		{
            UniteI u = unites[unites.Count - 1];
            unites.Remove(u);
		}

        /**
         * \fn public virtual void passerMain(JoueurI adversaire)
         * \brief the player "adversaire" can play now
         * 
         * \param[in, out] adversaire : the state of "adversaire" switches to "Tour"
         * 
         */
        public virtual void passerMain(JoueurI adversaire)
		{
            turn = false;
            adversaire.Turn = true;
		}

        /**
         * \fn public virtual int nbUnitesJouables()
         * \brief Who is the winner ?
         * 
         * \param[in, out] adversaire : the state of "adversaire" switches to "Perdant" or "Gagnant"
         * 
         * \return bool : true if the current player is the winner, else returns false
         */
        public virtual bool aVaincu(JoueurI adversaire)
		{
			throw new System.NotImplementedException();
		}

		public virtual void fin()
		{
			throw new System.NotImplementedException();
		}

        /**
         * \fn public virtual bool unitesSelectionnables(int lig, int col)
         * \brief Are there selectionable unites in the specified case ?
         * 
         * \param[in] lig : line of the case
         * \param[in] col : column of the case
         * 
         * \return bool : true if the current player has selectionnable unites in the specified case
         */
        public virtual bool unitesSelectionnables(int lig, int col)
		{
			throw new System.NotImplementedException();
		}

        /**
         * \fn public List<UniteI> unite()
         * \brief return the army of the current player
         * 
         */
        public virtual List<UniteI> unite()
        {
            return unites;
        }

	}
}

