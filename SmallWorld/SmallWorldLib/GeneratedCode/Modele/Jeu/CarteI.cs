//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Modele.Jeu
{
	using Modele;
	using Modele.Creation;
	using System;
    using System.Collections;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using Wrapper;
    using SmallWorldLib.GeneratedCode.Vue;
    using System.ComponentModel;

	public interface CarteI : INotifyPropertyChanged
	{
        CarteWrapper CarteW
        {
            get;
        }

        List<List<int>> CodeCases
        {
            get;
            set;
        }

        int Dim
        {
            get;
            set;
        }

        Dictionary<UniteI, Tuple<int, int>> PositUnite
        {
            get;
            set;
        }

        FabriqueCaseI Fabrique
        {
            get;
            set;
        }
        /*
        List<UniteI> UniteSet
        {
            get;
        }*/

        List<List<CaseI>> Cases
        {
            get;
        }

        UniteI Selected
        {
            get;
            set;
        }

        //legions placed on the map
        List<LegionI> Legions
        {
            get;
            set;
        }

        //Temporary legion added recently which is to be shown
        LegionI TmpLegion
        {
            get;
        }

        /// <summary>
        /// the method give a list of all the positions which are ajacents to a unit
        /// </summary>
        /// <param name="unite"> unit of which the ajacent cases are to be given </param>
        /// <returns> list of all the adjacents positions </returns>
		List<Tuple<int, int>> getListeAdjacents(UniteI unite);

		void deplacer(UniteI unite, int lig, int col);

		void lancerCombat(UniteI unite, int lig, int col);

		bool verifCaseAttaquable(JoueurI joueur, int lig, int col);

		Unite getDefenseur(int lig, int col);

		bool isEmpty(int lig, int col);

		void addUnite(UniteI unite);

        VueCaseI makeView(int l, int c);

        LegionI getLegion(int lig, int col);

        void ajouterLegion(LegionI legion);

        void generateCases();

        void linkJoueurs(List<Joueur.Joueur> joueurs);

        void suggerer(int x, int y);
	}
}

