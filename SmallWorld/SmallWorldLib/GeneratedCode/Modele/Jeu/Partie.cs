//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Modele.Jeu
{
	using Modele.Creation;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;

	public class Partie : PartieI
	{
		private int nombreTours;
        public int NombreTours
		{
            get { return nombreTours; }
            set { nombreTours = value; }
		}

        private List<JoueurI> joueurs;
		public List<JoueurI> Joueurs
		{
			get{return joueurs;}
			set{if(value.Count == 2) joueurs = value;}
		}

        private CarteI carte;
		public CarteI Carte
		{
            get { return carte; }
            set { carte = value; }
		}

        //index of the first player
        private int first;

        /**
         * \fn public Partie(List<JoueurI> joueurs, int nbTours, CarteI carte)
         * \brief Constructor of a party
         * 
         * param[in] joueurs : players
         * param[in] nbTours : number of rounds
         * param[in] carte : map
         * 
         */
        public Partie(List<JoueurI> joueurs, int nbTours, CarteI carte)
		{
            this.joueurs = joueurs;
            this.nombreTours = nbTours;
            this.carte = carte;

            //decides wich player is the first
            Random rand = new Random();
            first = rand.Next(0, 2);
            this.joueurs[first].Turn = true;
		}

        /**
         * \fn JoueurI start()
         * \brief start the game
         * 
         * return : the winner of the game
         */
        public virtual JoueurI start()
		{
            int i = first;
            JoueurI gagnant = null;
            while (gagnant == null && nombreTours != 0)
            {
                //tant que pas de gagnant :
                //- demander au joueur courant qui est le prochain qui doit jouer
                //- jouer un tour d'unite avec le joueur determiner
                //- determiner s'il y a un gagnant :
                //  -- si oui, on sort de la boucle
                //  -- sinon on réitère
               while (joueurs[i].Turn && gagnant == null)
               {
                    joueurs[i].jouer();
                    gagnant = determinerGagnant();
               }
               i = (i + 1) % 2;
               nombreTours--;
            }
            if(gagnant == null)
                gagnant = determinerGagnant();
            return gagnant;
		}

		public virtual void afficherUnites(List<UniteI> unites)
		{
			throw new System.NotImplementedException();
		}

        /**
         * \fn JoueurI determinerGagnant()
         * \brief calculate who is the winner
         * 
         * return : the winner of the game, or null if there is not winner yet
         */
        public virtual JoueurI determinerGagnant()
		{
            if (nombreTours == 0)
            {
                if (joueurs[0].Points > joueurs[1].Points)
                    return joueurs[0];
                else
                    return joueurs[1];
            }
            else
            {
                if (joueurs[0].Unites.Count == 0)
                    return joueurs[1];
                else if (joueurs[1].Unites.Count == 0)
                    return joueurs[0];
                else return null;
            }
		}

	}
}

